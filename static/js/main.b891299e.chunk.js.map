{"version":3,"sources":["Components/DateTimeRange/DateTimeRange.js","Components/UsersList/UsersList.js","App.js","serviceWorker.js","index.js"],"names":["DateTimeRange","React","useState","Date","selectedDate","setSelectedDate","handleDateChange","date","utils","DateFnsUtils","Grid","container","justify","disableToolbar","variant","format","margin","id","label","value","onChange","KeyboardButtonProps","UsersList","props","handleOpen","setState","showModal","open","handleClose","viewAllOpen","state","viewOpen","UserData","members","map","data","index","i","activity_periods","length","activity","push","viewClose","userName","name","user_data","real_name","className","Button","onClick","this","Modal","onClose","aria-labelledby","aria-describedby","color","key","start_time","end_time","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b891299e.chunk.js","sourcesContent":["import 'date-fns';\nimport React from 'react';\nimport './DateTimeRange.css';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nexport default function DateTimeRange() {\n  // The first commit of Material-UI\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2020-02-01T13:33:54'));\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);  \n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Grid container justify=\"space-around\">\n         <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"dd/MM/yyyy\"\n          margin=\"normal\"\n          id=\"date-picker-inline\"\n          label=\"Date picker\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        {/*<KeyboardDatePicker\n          margin=\"normal\"\n          id=\"date-picker-dialog\"\n          label=\"Date picker dialog\"\n          format=\"MM/dd/yyyy\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        /> */}\n        <KeyboardTimePicker\n          margin=\"normal\"\n          id=\"time-picker\"\n          label=\"Time picker\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change time',\n          }}\n        />\n      </Grid>\n    </MuiPickersUtilsProvider>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./UsersList.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { Modal } from \"@material-ui/core\";\nimport DateTimeRange from \"../DateTimeRange/DateTimeRange\";\nimport UserData from \"../../db.json\";\n\nclass UsersList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userName: \"\",\n      name: \" \",\n      showModal: false,\n      open: false,\n      viewOpen: false,\n      activity: [],\n      user_data: \" \",\n    };\n  }\n  // componentWillMount(){}\n\n  componentDidMount() {\n    UserData.members.map((data, index) => {\n      // console.log(data);\n      if (index === 0) {\n        this.setState({\n          userName: data.real_name,\n        });\n      } else {\n        this.setState({\n          name: data.real_name,\n        });\n      }\n    });\n  }\n\n\n  handleOpen = () => {\n    this.setState({\n      showModal: true,\n      open: true,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      showModal: false,\n      open: false,\n    });\n  };\n  viewAllOpen = () => {\n    if (this.state.open) {\n      this.setState({\n        viewOpen: true,\n      });\n    }\n\n    UserData.members.map((data, index) => {\n\n      for (let i = 0; i < data.activity_periods.length; i++) {\n        this.state.activity.push(data.activity_periods[i]);\n      }\n    });\n  };\n  viewClose = () => {\n    this.setState({\n      viewOpen: false,\n      activity:[]\n    });\n  };\n  render() {\n  \n    return (\n      <div className=\"UsersList\">\n        <div className=\"users-btn\">\n          <Button\n            variant=\"contained\"\n            className=\"btns\"\n            onClick={this.handleOpen}\n          >\n            {\" \"}\n            {this.state.userName}\n          </Button>\n          <Button variant=\"contained\" className=\"btn\" onClick={this.handleOpen}>\n            {\" \"}\n            {this.state.name}\n          </Button>\n        </div>\n        <Modal\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div className=\"modalbox\">\n            <h2>Time Range </h2>\n            <DateTimeRange />\n            <Button\n              variant=\"contained\"\n              className=\"view_btn\"\n              onClick={this.viewAllOpen}\n              color=\"primary\"\n            >\n              View All\n            </Button>\n          </div>\n        </Modal>\n       \n        <Modal\n          open={this.state.viewOpen}\n          onClose={this.viewClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div className=\"viewbox\">\n            <h2>View All </h2>            \n            {this.state.activity.map((data,index) => (\n              <div className=\"activity_period\">              \n                <p key={index}> Start Time  {data.start_time}</p>\n                <p key={index} >End Time {data.end_time}</p>   \n                </div>           \n            ))}\n            {/* </div> */}\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default UsersList;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import Users from './Components/Users/Users';\nimport UsersList from './Components/UsersList/UsersList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UsersList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}